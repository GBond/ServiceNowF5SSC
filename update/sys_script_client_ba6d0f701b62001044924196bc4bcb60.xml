<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script_client">
    <sys_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_extended>false</applies_extended>
        <condition/>
        <description/>
        <field>pool_members</field>
        <global>true</global>
        <isolate_script>true</isolate_script>
        <messages/>
        <name>pmo-poolMemOnChange</name>
        <order/>
        <script><![CDATA[function onChange(control, oldValue, newValue, isLoading, isTemplate) {
	if (isLoading || newValue === '') {
		return;
	}
	
	var pMemList = processInput(newValue);
	if(pMemList) {
		g_form.removeDecoration('pool_members', 'icon-alert', 'Invalid Pool Members input', 'color-red');
		
		// Retrieve Pool member Cluster and Pool Dependencies
		var ga = new GlideAjax('ajaxUtils');
		ga.addParam('sysparm_name', 'getPoolMemOpsDeps');
		ga.addParam('pMemList', JSON.stringify(pMemList));
		ga.getXML(parseMessage);
		
	} else {
		g_form.addDecoration('pool_members', 'icon-alert', 'Invalid Pool Members input', 'color-red');
	}   
}

function parseMessage(response) {
	// Clear the default/previous options
	g_form.clearOptions('pool');
	g_form.clearOptions('bigip_cluster');
	
	// Add common pools and clusters returned from AJAX query
	var data = JSON.parse(response.responseXML.documentElement.getAttribute('answer'));
	data.forEach(function (item) {
			g_form.addOption('pool', item.pool, item.pool);
			g_form.addOption('bigip_cluster', item.clusterName, item.clusterName);
	});

	// Allow users to modify fields
	g_form.setReadOnly('pool', false);
	g_form.setReadOnly('bigip_cluster', false);
}

function processInput(pMemsInput) {
	//Remove White Spaces
	pMemsInput = pMemsInput.replace(/\s/g, '');
	
	//Separate on comma
	var pMemsList = pMemsInput.split(',');
	
	var pmObjList = [];
	//Validate that each is in IP:PORT format (i.e 10.1.1.1:80)
	for (var i = 0; i < pMemsList.length; i++) {
		var pm = pMemsList[i];
		
		// Test for presence of colon and then split
		if (!pm.match(/:/)) {
			return null;
		}
		var pmSplit = pm.split(':');
		var address = pmSplit[0];
		var port = pmSplit[1];
		
		// Test for valid IP adrdress and port number
		if (
			address.match(/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/)
			&&
			port.match(/^()([1-9]|[1-5]?[0-9]{2,4}|6[1-4][0-9]{3}|65[1-4][0-9]{2}|655[1-2][0-9]|6553[1-5])$/)) { 
			pmObjList.push({address: address, port: port});
		} else {
			return null;
		}
	}
	return pmObjList;
}]]></script>
        <sys_class_name>sys_script_client</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-01-22 16:33:31</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>ba6d0f701b62001044924196bc4bcb60</sys_id>
        <sys_mod_count>32</sys_mod_count>
        <sys_name>pmo-poolMemOnChange</sys_name>
        <sys_overrides/>
        <sys_package display_value="F5_SSC_PT" source="x_209235_f5_ssc_pt">2cfdd0731b42001044924196bc4bcb69</sys_package>
        <sys_policy/>
        <sys_scope display_value="F5_SSC_PT">2cfdd0731b42001044924196bc4bcb69</sys_scope>
        <sys_update_name>sys_script_client_ba6d0f701b62001044924196bc4bcb60</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-01-23 20:05:08</sys_updated_on>
        <table>x_209235_f5_ssc_pt_pool_member_operations</table>
        <type>onChange</type>
        <ui_type>10</ui_type>
        <view/>
    </sys_script_client>
</record_update>
