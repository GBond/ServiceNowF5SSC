<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_209235_f5_ssc_pt_pool_member_operations</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>launchPoolMemJob</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	var ansible = new ansibleApiHelper();
	var app = new appUtils();
	
	var cluster = current.getValue('bigip_cluster');
	var extra_vars = {
		cluster: app.getClusterName(cluster)
	};
	
	var poolMems = current.getValue('pool_members');
	// Remove whitespaces
	poolMems = poolMems.replace(/\s/g, '');
	
	var operation = current.getValue('operation');
	var pool = current.getValue('pool');
	
	var pm_ops = [];
	var pmSplit1 = poolMems.split(",");
	for (var i = 0; i < pmSplit1.length; i++) { 
		var pmSplit2 = pmSplit1[i].split(":");
		var ip = pmSplit2[0];
		var port = pmSplit2[1];
		pm_ops.push({ member_ip: ip, member_port: port, pool: pool, state: operation });
	}
	extra_vars.pool_member_ops = pm_ops;
	ansible.launchPmOpsJob(extra_vars);
	
	// Remove records if operation is to remove (absent)
	if (operation == 'absent') {
		app.removePoolMems(cluster, pm_ops);
	// Add records if operation is to add (present)
	} else if (operation == 'present') {
		app.addPoolMems(cluster, pm_ops);
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-01-17 20:29:36</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>ee831a9b1b56001044924196bc4bcb0b</sys_id>
        <sys_mod_count>17</sys_mod_count>
        <sys_name>launchPoolMemJob</sys_name>
        <sys_overrides/>
        <sys_package display_value="F5_SSC_PT" source="x_209235_f5_ssc_pt">2cfdd0731b42001044924196bc4bcb69</sys_package>
        <sys_policy/>
        <sys_scope display_value="F5_SSC_PT">2cfdd0731b42001044924196bc4bcb69</sys_scope>
        <sys_update_name>sys_script_ee831a9b1b56001044924196bc4bcb0b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-02-03 14:33:03</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=ee831a9b1b56001044924196bc4bcb0b"/>
</record_update>
